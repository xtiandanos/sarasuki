{"ast":null,"code":"'use strict'; // https://github.com/tc39/proposal-observable\n\nvar $ = require('../internals/export');\n\nvar global = require('../internals/global');\n\nvar call = require('../internals/function-call');\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar setSpecies = require('../internals/set-species');\n\nvar aCallable = require('../internals/a-callable');\n\nvar isCallable = require('../internals/is-callable');\n\nvar isConstructor = require('../internals/is-constructor');\n\nvar anObject = require('../internals/an-object');\n\nvar isObject = require('../internals/is-object');\n\nvar anInstance = require('../internals/an-instance');\n\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar redefine = require('../internals/redefine');\n\nvar redefineAll = require('../internals/redefine-all');\n\nvar getIterator = require('../internals/get-iterator');\n\nvar getMethod = require('../internals/get-method');\n\nvar iterate = require('../internals/iterate');\n\nvar hostReportErrors = require('../internals/host-report-errors');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar InternalStateModule = require('../internals/internal-state');\n\nvar OBSERVABLE = wellKnownSymbol('observable');\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\nvar Array = global.Array;\n\nvar cleanupSubscription = function (subscriptionState) {\n  var cleanup = subscriptionState.cleanup;\n\n  if (cleanup) {\n    subscriptionState.cleanup = undefined;\n\n    try {\n      cleanup();\n    } catch (error) {\n      hostReportErrors(error);\n    }\n  }\n};\n\nvar subscriptionClosed = function (subscriptionState) {\n  return subscriptionState.observer === undefined;\n};\n\nvar close = function (subscriptionState) {\n  var subscription = subscriptionState.facade;\n\n  if (!DESCRIPTORS) {\n    subscription.closed = true;\n    var subscriptionObserver = subscriptionState.subscriptionObserver;\n    if (subscriptionObserver) subscriptionObserver.closed = true;\n  }\n\n  subscriptionState.observer = undefined;\n};\n\nvar Subscription = function (observer, subscriber) {\n  var subscriptionState = setInternalState(this, {\n    cleanup: undefined,\n    observer: anObject(observer),\n    subscriptionObserver: undefined\n  });\n  var start;\n  if (!DESCRIPTORS) this.closed = false;\n\n  try {\n    if (start = getMethod(observer, 'start')) call(start, observer, this);\n  } catch (error) {\n    hostReportErrors(error);\n  }\n\n  if (subscriptionClosed(subscriptionState)) return;\n  var subscriptionObserver = subscriptionState.subscriptionObserver = new SubscriptionObserver(this);\n\n  try {\n    var cleanup = subscriber(subscriptionObserver);\n    var subscription = cleanup;\n    if (cleanup != null) subscriptionState.cleanup = isCallable(cleanup.unsubscribe) ? function () {\n      subscription.unsubscribe();\n    } : aCallable(cleanup);\n  } catch (error) {\n    subscriptionObserver.error(error);\n    return;\n  }\n\n  if (subscriptionClosed(subscriptionState)) cleanupSubscription(subscriptionState);\n};\n\nSubscription.prototype = redefineAll({}, {\n  unsubscribe: function unsubscribe() {\n    var subscriptionState = getInternalState(this);\n\n    if (!subscriptionClosed(subscriptionState)) {\n      close(subscriptionState);\n      cleanupSubscription(subscriptionState);\n    }\n  }\n});\nif (DESCRIPTORS) defineProperty(Subscription.prototype, 'closed', {\n  configurable: true,\n  get: function () {\n    return subscriptionClosed(getInternalState(this));\n  }\n});\n\nvar SubscriptionObserver = function (subscription) {\n  setInternalState(this, {\n    subscription: subscription\n  });\n  if (!DESCRIPTORS) this.closed = false;\n};\n\nSubscriptionObserver.prototype = redefineAll({}, {\n  next: function next(value) {\n    var subscriptionState = getInternalState(getInternalState(this).subscription);\n\n    if (!subscriptionClosed(subscriptionState)) {\n      var observer = subscriptionState.observer;\n\n      try {\n        var nextMethod = getMethod(observer, 'next');\n        if (nextMethod) call(nextMethod, observer, value);\n      } catch (error) {\n        hostReportErrors(error);\n      }\n    }\n  },\n  error: function error(value) {\n    var subscriptionState = getInternalState(getInternalState(this).subscription);\n\n    if (!subscriptionClosed(subscriptionState)) {\n      var observer = subscriptionState.observer;\n      close(subscriptionState);\n\n      try {\n        var errorMethod = getMethod(observer, 'error');\n        if (errorMethod) call(errorMethod, observer, value);else hostReportErrors(value);\n      } catch (err) {\n        hostReportErrors(err);\n      }\n\n      cleanupSubscription(subscriptionState);\n    }\n  },\n  complete: function complete() {\n    var subscriptionState = getInternalState(getInternalState(this).subscription);\n\n    if (!subscriptionClosed(subscriptionState)) {\n      var observer = subscriptionState.observer;\n      close(subscriptionState);\n\n      try {\n        var completeMethod = getMethod(observer, 'complete');\n        if (completeMethod) call(completeMethod, observer);\n      } catch (error) {\n        hostReportErrors(error);\n      }\n\n      cleanupSubscription(subscriptionState);\n    }\n  }\n});\nif (DESCRIPTORS) defineProperty(SubscriptionObserver.prototype, 'closed', {\n  configurable: true,\n  get: function () {\n    return subscriptionClosed(getInternalState(getInternalState(this).subscription));\n  }\n});\n\nvar $Observable = function Observable(subscriber) {\n  anInstance(this, ObservablePrototype);\n  setInternalState(this, {\n    subscriber: aCallable(subscriber)\n  });\n};\n\nvar ObservablePrototype = $Observable.prototype;\nredefineAll(ObservablePrototype, {\n  subscribe: function subscribe(observer) {\n    var length = arguments.length;\n    return new Subscription(isCallable(observer) ? {\n      next: observer,\n      error: length > 1 ? arguments[1] : undefined,\n      complete: length > 2 ? arguments[2] : undefined\n    } : isObject(observer) ? observer : {}, getInternalState(this).subscriber);\n  }\n});\nredefineAll($Observable, {\n  from: function from(x) {\n    var C = isConstructor(this) ? this : $Observable;\n    var observableMethod = getMethod(anObject(x), OBSERVABLE);\n\n    if (observableMethod) {\n      var observable = anObject(call(observableMethod, x));\n      return observable.constructor === C ? observable : new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n\n    var iterator = getIterator(x);\n    return new C(function (observer) {\n      iterate(iterator, function (it, stop) {\n        observer.next(it);\n        if (observer.closed) return stop();\n      }, {\n        IS_ITERATOR: true,\n        INTERRUPTED: true\n      });\n      observer.complete();\n    });\n  },\n  of: function of() {\n    var C = isConstructor(this) ? this : $Observable;\n    var length = arguments.length;\n    var items = Array(length);\n    var index = 0;\n\n    while (index < length) items[index] = arguments[index++];\n\n    return new C(function (observer) {\n      for (var i = 0; i < length; i++) {\n        observer.next(items[i]);\n        if (observer.closed) return;\n      }\n\n      observer.complete();\n    });\n  }\n});\nredefine(ObservablePrototype, OBSERVABLE, function () {\n  return this;\n});\n$({\n  global: true\n}, {\n  Observable: $Observable\n});\nsetSpecies('Observable');","map":{"version":3,"sources":["/Users/christiandanos/Desktop/sarasuki/base/node_modules/core-js/modules/esnext.observable.js"],"names":["$","require","global","call","DESCRIPTORS","setSpecies","aCallable","isCallable","isConstructor","anObject","isObject","anInstance","defineProperty","f","redefine","redefineAll","getIterator","getMethod","iterate","hostReportErrors","wellKnownSymbol","InternalStateModule","OBSERVABLE","getInternalState","get","setInternalState","set","Array","cleanupSubscription","subscriptionState","cleanup","undefined","error","subscriptionClosed","observer","close","subscription","facade","closed","subscriptionObserver","Subscription","subscriber","start","SubscriptionObserver","unsubscribe","prototype","configurable","next","value","nextMethod","errorMethod","err","complete","completeMethod","$Observable","Observable","ObservablePrototype","subscribe","length","arguments","from","x","C","observableMethod","observable","constructor","iterator","it","stop","IS_ITERATOR","INTERRUPTED","of","items","index","i"],"mappings":"AAAA,a,CACA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,4BAAD,CAAlB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,0BAAD,CAAzB;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIM,UAAU,GAAGN,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAIO,aAAa,GAAGP,OAAO,CAAC,6BAAD,CAA3B;;AACA,IAAIQ,QAAQ,GAAGR,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIS,QAAQ,GAAGT,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIU,UAAU,GAAGV,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAIW,cAAc,GAAGX,OAAO,CAAC,qCAAD,CAAP,CAA+CY,CAApE;;AACA,IAAIC,QAAQ,GAAGb,OAAO,CAAC,uBAAD,CAAtB;;AACA,IAAIc,WAAW,GAAGd,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAIe,WAAW,GAAGf,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAIgB,SAAS,GAAGhB,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIiB,OAAO,GAAGjB,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIkB,gBAAgB,GAAGlB,OAAO,CAAC,iCAAD,CAA9B;;AACA,IAAImB,eAAe,GAAGnB,OAAO,CAAC,gCAAD,CAA7B;;AACA,IAAIoB,mBAAmB,GAAGpB,OAAO,CAAC,6BAAD,CAAjC;;AAEA,IAAIqB,UAAU,GAAGF,eAAe,CAAC,YAAD,CAAhC;AACA,IAAIG,gBAAgB,GAAGF,mBAAmB,CAACG,GAA3C;AACA,IAAIC,gBAAgB,GAAGJ,mBAAmB,CAACK,GAA3C;AACA,IAAIC,KAAK,GAAGzB,MAAM,CAACyB,KAAnB;;AAEA,IAAIC,mBAAmB,GAAG,UAAUC,iBAAV,EAA6B;AACrD,MAAIC,OAAO,GAAGD,iBAAiB,CAACC,OAAhC;;AACA,MAAIA,OAAJ,EAAa;AACXD,IAAAA,iBAAiB,CAACC,OAAlB,GAA4BC,SAA5B;;AACA,QAAI;AACFD,MAAAA,OAAO;AACR,KAFD,CAEE,OAAOE,KAAP,EAAc;AACdb,MAAAA,gBAAgB,CAACa,KAAD,CAAhB;AACD;AACF;AACF,CAVD;;AAYA,IAAIC,kBAAkB,GAAG,UAAUJ,iBAAV,EAA6B;AACpD,SAAOA,iBAAiB,CAACK,QAAlB,KAA+BH,SAAtC;AACD,CAFD;;AAIA,IAAII,KAAK,GAAG,UAAUN,iBAAV,EAA6B;AACvC,MAAIO,YAAY,GAAGP,iBAAiB,CAACQ,MAArC;;AACA,MAAI,CAACjC,WAAL,EAAkB;AAChBgC,IAAAA,YAAY,CAACE,MAAb,GAAsB,IAAtB;AACA,QAAIC,oBAAoB,GAAGV,iBAAiB,CAACU,oBAA7C;AACA,QAAIA,oBAAJ,EAA0BA,oBAAoB,CAACD,MAArB,GAA8B,IAA9B;AAC3B;;AAACT,EAAAA,iBAAiB,CAACK,QAAlB,GAA6BH,SAA7B;AACH,CAPD;;AASA,IAAIS,YAAY,GAAG,UAAUN,QAAV,EAAoBO,UAApB,EAAgC;AACjD,MAAIZ,iBAAiB,GAAGJ,gBAAgB,CAAC,IAAD,EAAO;AAC7CK,IAAAA,OAAO,EAAEC,SADoC;AAE7CG,IAAAA,QAAQ,EAAEzB,QAAQ,CAACyB,QAAD,CAF2B;AAG7CK,IAAAA,oBAAoB,EAAER;AAHuB,GAAP,CAAxC;AAKA,MAAIW,KAAJ;AACA,MAAI,CAACtC,WAAL,EAAkB,KAAKkC,MAAL,GAAc,KAAd;;AAClB,MAAI;AACF,QAAII,KAAK,GAAGzB,SAAS,CAACiB,QAAD,EAAW,OAAX,CAArB,EAA0C/B,IAAI,CAACuC,KAAD,EAAQR,QAAR,EAAkB,IAAlB,CAAJ;AAC3C,GAFD,CAEE,OAAOF,KAAP,EAAc;AACdb,IAAAA,gBAAgB,CAACa,KAAD,CAAhB;AACD;;AACD,MAAIC,kBAAkB,CAACJ,iBAAD,CAAtB,EAA2C;AAC3C,MAAIU,oBAAoB,GAAGV,iBAAiB,CAACU,oBAAlB,GAAyC,IAAII,oBAAJ,CAAyB,IAAzB,CAApE;;AACA,MAAI;AACF,QAAIb,OAAO,GAAGW,UAAU,CAACF,oBAAD,CAAxB;AACA,QAAIH,YAAY,GAAGN,OAAnB;AACA,QAAIA,OAAO,IAAI,IAAf,EAAqBD,iBAAiB,CAACC,OAAlB,GAA4BvB,UAAU,CAACuB,OAAO,CAACc,WAAT,CAAV,GAC7C,YAAY;AAAER,MAAAA,YAAY,CAACQ,WAAb;AAA6B,KADE,GAE7CtC,SAAS,CAACwB,OAAD,CAFQ;AAGtB,GAND,CAME,OAAOE,KAAP,EAAc;AACdO,IAAAA,oBAAoB,CAACP,KAArB,CAA2BA,KAA3B;AACA;AACD;;AAAC,MAAIC,kBAAkB,CAACJ,iBAAD,CAAtB,EAA2CD,mBAAmB,CAACC,iBAAD,CAAnB;AAC9C,CAzBD;;AA2BAW,YAAY,CAACK,SAAb,GAAyB9B,WAAW,CAAC,EAAD,EAAK;AACvC6B,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,QAAIf,iBAAiB,GAAGN,gBAAgB,CAAC,IAAD,CAAxC;;AACA,QAAI,CAACU,kBAAkB,CAACJ,iBAAD,CAAvB,EAA4C;AAC1CM,MAAAA,KAAK,CAACN,iBAAD,CAAL;AACAD,MAAAA,mBAAmB,CAACC,iBAAD,CAAnB;AACD;AACF;AAPsC,CAAL,CAApC;AAUA,IAAIzB,WAAJ,EAAiBQ,cAAc,CAAC4B,YAAY,CAACK,SAAd,EAAyB,QAAzB,EAAmC;AAChEC,EAAAA,YAAY,EAAE,IADkD;AAEhEtB,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOS,kBAAkB,CAACV,gBAAgB,CAAC,IAAD,CAAjB,CAAzB;AACD;AAJ+D,CAAnC,CAAd;;AAOjB,IAAIoB,oBAAoB,GAAG,UAAUP,YAAV,EAAwB;AACjDX,EAAAA,gBAAgB,CAAC,IAAD,EAAO;AAAEW,IAAAA,YAAY,EAAEA;AAAhB,GAAP,CAAhB;AACA,MAAI,CAAChC,WAAL,EAAkB,KAAKkC,MAAL,GAAc,KAAd;AACnB,CAHD;;AAKAK,oBAAoB,CAACE,SAArB,GAAiC9B,WAAW,CAAC,EAAD,EAAK;AAC/CgC,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC,KAAd,EAAqB;AACzB,QAAInB,iBAAiB,GAAGN,gBAAgB,CAACA,gBAAgB,CAAC,IAAD,CAAhB,CAAuBa,YAAxB,CAAxC;;AACA,QAAI,CAACH,kBAAkB,CAACJ,iBAAD,CAAvB,EAA4C;AAC1C,UAAIK,QAAQ,GAAGL,iBAAiB,CAACK,QAAjC;;AACA,UAAI;AACF,YAAIe,UAAU,GAAGhC,SAAS,CAACiB,QAAD,EAAW,MAAX,CAA1B;AACA,YAAIe,UAAJ,EAAgB9C,IAAI,CAAC8C,UAAD,EAAaf,QAAb,EAAuBc,KAAvB,CAAJ;AACjB,OAHD,CAGE,OAAOhB,KAAP,EAAc;AACdb,QAAAA,gBAAgB,CAACa,KAAD,CAAhB;AACD;AACF;AACF,GAZ8C;AAa/CA,EAAAA,KAAK,EAAE,SAASA,KAAT,CAAegB,KAAf,EAAsB;AAC3B,QAAInB,iBAAiB,GAAGN,gBAAgB,CAACA,gBAAgB,CAAC,IAAD,CAAhB,CAAuBa,YAAxB,CAAxC;;AACA,QAAI,CAACH,kBAAkB,CAACJ,iBAAD,CAAvB,EAA4C;AAC1C,UAAIK,QAAQ,GAAGL,iBAAiB,CAACK,QAAjC;AACAC,MAAAA,KAAK,CAACN,iBAAD,CAAL;;AACA,UAAI;AACF,YAAIqB,WAAW,GAAGjC,SAAS,CAACiB,QAAD,EAAW,OAAX,CAA3B;AACA,YAAIgB,WAAJ,EAAiB/C,IAAI,CAAC+C,WAAD,EAAchB,QAAd,EAAwBc,KAAxB,CAAJ,CAAjB,KACK7B,gBAAgB,CAAC6B,KAAD,CAAhB;AACN,OAJD,CAIE,OAAOG,GAAP,EAAY;AACZhC,QAAAA,gBAAgB,CAACgC,GAAD,CAAhB;AACD;;AAACvB,MAAAA,mBAAmB,CAACC,iBAAD,CAAnB;AACH;AACF,GA1B8C;AA2B/CuB,EAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,QAAIvB,iBAAiB,GAAGN,gBAAgB,CAACA,gBAAgB,CAAC,IAAD,CAAhB,CAAuBa,YAAxB,CAAxC;;AACA,QAAI,CAACH,kBAAkB,CAACJ,iBAAD,CAAvB,EAA4C;AAC1C,UAAIK,QAAQ,GAAGL,iBAAiB,CAACK,QAAjC;AACAC,MAAAA,KAAK,CAACN,iBAAD,CAAL;;AACA,UAAI;AACF,YAAIwB,cAAc,GAAGpC,SAAS,CAACiB,QAAD,EAAW,UAAX,CAA9B;AACA,YAAImB,cAAJ,EAAoBlD,IAAI,CAACkD,cAAD,EAAiBnB,QAAjB,CAAJ;AACrB,OAHD,CAGE,OAAOF,KAAP,EAAc;AACdb,QAAAA,gBAAgB,CAACa,KAAD,CAAhB;AACD;;AAACJ,MAAAA,mBAAmB,CAACC,iBAAD,CAAnB;AACH;AACF;AAvC8C,CAAL,CAA5C;AA0CA,IAAIzB,WAAJ,EAAiBQ,cAAc,CAAC+B,oBAAoB,CAACE,SAAtB,EAAiC,QAAjC,EAA2C;AACxEC,EAAAA,YAAY,EAAE,IAD0D;AAExEtB,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOS,kBAAkB,CAACV,gBAAgB,CAACA,gBAAgB,CAAC,IAAD,CAAhB,CAAuBa,YAAxB,CAAjB,CAAzB;AACD;AAJuE,CAA3C,CAAd;;AAOjB,IAAIkB,WAAW,GAAG,SAASC,UAAT,CAAoBd,UAApB,EAAgC;AAChD9B,EAAAA,UAAU,CAAC,IAAD,EAAO6C,mBAAP,CAAV;AACA/B,EAAAA,gBAAgB,CAAC,IAAD,EAAO;AAAEgB,IAAAA,UAAU,EAAEnC,SAAS,CAACmC,UAAD;AAAvB,GAAP,CAAhB;AACD,CAHD;;AAKA,IAAIe,mBAAmB,GAAGF,WAAW,CAACT,SAAtC;AAEA9B,WAAW,CAACyC,mBAAD,EAAsB;AAC/BC,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBvB,QAAnB,EAA6B;AACtC,QAAIwB,MAAM,GAAGC,SAAS,CAACD,MAAvB;AACA,WAAO,IAAIlB,YAAJ,CAAiBjC,UAAU,CAAC2B,QAAD,CAAV,GAAuB;AAC7Ca,MAAAA,IAAI,EAAEb,QADuC;AAE7CF,MAAAA,KAAK,EAAE0B,MAAM,GAAG,CAAT,GAAaC,SAAS,CAAC,CAAD,CAAtB,GAA4B5B,SAFU;AAG7CqB,MAAAA,QAAQ,EAAEM,MAAM,GAAG,CAAT,GAAaC,SAAS,CAAC,CAAD,CAAtB,GAA4B5B;AAHO,KAAvB,GAIpBrB,QAAQ,CAACwB,QAAD,CAAR,GAAqBA,QAArB,GAAgC,EAJ7B,EAIiCX,gBAAgB,CAAC,IAAD,CAAhB,CAAuBkB,UAJxD,CAAP;AAKD;AAR8B,CAAtB,CAAX;AAWA1B,WAAW,CAACuC,WAAD,EAAc;AACvBM,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC,CAAd,EAAiB;AACrB,QAAIC,CAAC,GAAGtD,aAAa,CAAC,IAAD,CAAb,GAAsB,IAAtB,GAA6B8C,WAArC;AACA,QAAIS,gBAAgB,GAAG9C,SAAS,CAACR,QAAQ,CAACoD,CAAD,CAAT,EAAcvC,UAAd,CAAhC;;AACA,QAAIyC,gBAAJ,EAAsB;AACpB,UAAIC,UAAU,GAAGvD,QAAQ,CAACN,IAAI,CAAC4D,gBAAD,EAAmBF,CAAnB,CAAL,CAAzB;AACA,aAAOG,UAAU,CAACC,WAAX,KAA2BH,CAA3B,GAA+BE,UAA/B,GAA4C,IAAIF,CAAJ,CAAM,UAAU5B,QAAV,EAAoB;AAC3E,eAAO8B,UAAU,CAACP,SAAX,CAAqBvB,QAArB,CAAP;AACD,OAFkD,CAAnD;AAGD;;AACD,QAAIgC,QAAQ,GAAGlD,WAAW,CAAC6C,CAAD,CAA1B;AACA,WAAO,IAAIC,CAAJ,CAAM,UAAU5B,QAAV,EAAoB;AAC/BhB,MAAAA,OAAO,CAACgD,QAAD,EAAW,UAAUC,EAAV,EAAcC,IAAd,EAAoB;AACpClC,QAAAA,QAAQ,CAACa,IAAT,CAAcoB,EAAd;AACA,YAAIjC,QAAQ,CAACI,MAAb,EAAqB,OAAO8B,IAAI,EAAX;AACtB,OAHM,EAGJ;AAAEC,QAAAA,WAAW,EAAE,IAAf;AAAqBC,QAAAA,WAAW,EAAE;AAAlC,OAHI,CAAP;AAIApC,MAAAA,QAAQ,CAACkB,QAAT;AACD,KANM,CAAP;AAOD,GAlBsB;AAmBvBmB,EAAAA,EAAE,EAAE,SAASA,EAAT,GAAc;AAChB,QAAIT,CAAC,GAAGtD,aAAa,CAAC,IAAD,CAAb,GAAsB,IAAtB,GAA6B8C,WAArC;AACA,QAAII,MAAM,GAAGC,SAAS,CAACD,MAAvB;AACA,QAAIc,KAAK,GAAG7C,KAAK,CAAC+B,MAAD,CAAjB;AACA,QAAIe,KAAK,GAAG,CAAZ;;AACA,WAAOA,KAAK,GAAGf,MAAf,EAAuBc,KAAK,CAACC,KAAD,CAAL,GAAed,SAAS,CAACc,KAAK,EAAN,CAAxB;;AACvB,WAAO,IAAIX,CAAJ,CAAM,UAAU5B,QAAV,EAAoB;AAC/B,WAAK,IAAIwC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,MAApB,EAA4BgB,CAAC,EAA7B,EAAiC;AAC/BxC,QAAAA,QAAQ,CAACa,IAAT,CAAcyB,KAAK,CAACE,CAAD,CAAnB;AACA,YAAIxC,QAAQ,CAACI,MAAb,EAAqB;AACtB;;AAACJ,MAAAA,QAAQ,CAACkB,QAAT;AACH,KALM,CAAP;AAMD;AA/BsB,CAAd,CAAX;AAkCAtC,QAAQ,CAAC0C,mBAAD,EAAsBlC,UAAtB,EAAkC,YAAY;AAAE,SAAO,IAAP;AAAc,CAA9D,CAAR;AAEAtB,CAAC,CAAC;AAAEE,EAAAA,MAAM,EAAE;AAAV,CAAD,EAAmB;AAClBqD,EAAAA,UAAU,EAAED;AADM,CAAnB,CAAD;AAIAjD,UAAU,CAAC,YAAD,CAAV","sourcesContent":["'use strict';\n// https://github.com/tc39/proposal-observable\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar setSpecies = require('../internals/set-species');\nvar aCallable = require('../internals/a-callable');\nvar isCallable = require('../internals/is-callable');\nvar isConstructor = require('../internals/is-constructor');\nvar anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar anInstance = require('../internals/an-instance');\nvar defineProperty = require('../internals/object-define-property').f;\nvar redefine = require('../internals/redefine');\nvar redefineAll = require('../internals/redefine-all');\nvar getIterator = require('../internals/get-iterator');\nvar getMethod = require('../internals/get-method');\nvar iterate = require('../internals/iterate');\nvar hostReportErrors = require('../internals/host-report-errors');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar OBSERVABLE = wellKnownSymbol('observable');\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\nvar Array = global.Array;\n\nvar cleanupSubscription = function (subscriptionState) {\n  var cleanup = subscriptionState.cleanup;\n  if (cleanup) {\n    subscriptionState.cleanup = undefined;\n    try {\n      cleanup();\n    } catch (error) {\n      hostReportErrors(error);\n    }\n  }\n};\n\nvar subscriptionClosed = function (subscriptionState) {\n  return subscriptionState.observer === undefined;\n};\n\nvar close = function (subscriptionState) {\n  var subscription = subscriptionState.facade;\n  if (!DESCRIPTORS) {\n    subscription.closed = true;\n    var subscriptionObserver = subscriptionState.subscriptionObserver;\n    if (subscriptionObserver) subscriptionObserver.closed = true;\n  } subscriptionState.observer = undefined;\n};\n\nvar Subscription = function (observer, subscriber) {\n  var subscriptionState = setInternalState(this, {\n    cleanup: undefined,\n    observer: anObject(observer),\n    subscriptionObserver: undefined\n  });\n  var start;\n  if (!DESCRIPTORS) this.closed = false;\n  try {\n    if (start = getMethod(observer, 'start')) call(start, observer, this);\n  } catch (error) {\n    hostReportErrors(error);\n  }\n  if (subscriptionClosed(subscriptionState)) return;\n  var subscriptionObserver = subscriptionState.subscriptionObserver = new SubscriptionObserver(this);\n  try {\n    var cleanup = subscriber(subscriptionObserver);\n    var subscription = cleanup;\n    if (cleanup != null) subscriptionState.cleanup = isCallable(cleanup.unsubscribe)\n      ? function () { subscription.unsubscribe(); }\n      : aCallable(cleanup);\n  } catch (error) {\n    subscriptionObserver.error(error);\n    return;\n  } if (subscriptionClosed(subscriptionState)) cleanupSubscription(subscriptionState);\n};\n\nSubscription.prototype = redefineAll({}, {\n  unsubscribe: function unsubscribe() {\n    var subscriptionState = getInternalState(this);\n    if (!subscriptionClosed(subscriptionState)) {\n      close(subscriptionState);\n      cleanupSubscription(subscriptionState);\n    }\n  }\n});\n\nif (DESCRIPTORS) defineProperty(Subscription.prototype, 'closed', {\n  configurable: true,\n  get: function () {\n    return subscriptionClosed(getInternalState(this));\n  }\n});\n\nvar SubscriptionObserver = function (subscription) {\n  setInternalState(this, { subscription: subscription });\n  if (!DESCRIPTORS) this.closed = false;\n};\n\nSubscriptionObserver.prototype = redefineAll({}, {\n  next: function next(value) {\n    var subscriptionState = getInternalState(getInternalState(this).subscription);\n    if (!subscriptionClosed(subscriptionState)) {\n      var observer = subscriptionState.observer;\n      try {\n        var nextMethod = getMethod(observer, 'next');\n        if (nextMethod) call(nextMethod, observer, value);\n      } catch (error) {\n        hostReportErrors(error);\n      }\n    }\n  },\n  error: function error(value) {\n    var subscriptionState = getInternalState(getInternalState(this).subscription);\n    if (!subscriptionClosed(subscriptionState)) {\n      var observer = subscriptionState.observer;\n      close(subscriptionState);\n      try {\n        var errorMethod = getMethod(observer, 'error');\n        if (errorMethod) call(errorMethod, observer, value);\n        else hostReportErrors(value);\n      } catch (err) {\n        hostReportErrors(err);\n      } cleanupSubscription(subscriptionState);\n    }\n  },\n  complete: function complete() {\n    var subscriptionState = getInternalState(getInternalState(this).subscription);\n    if (!subscriptionClosed(subscriptionState)) {\n      var observer = subscriptionState.observer;\n      close(subscriptionState);\n      try {\n        var completeMethod = getMethod(observer, 'complete');\n        if (completeMethod) call(completeMethod, observer);\n      } catch (error) {\n        hostReportErrors(error);\n      } cleanupSubscription(subscriptionState);\n    }\n  }\n});\n\nif (DESCRIPTORS) defineProperty(SubscriptionObserver.prototype, 'closed', {\n  configurable: true,\n  get: function () {\n    return subscriptionClosed(getInternalState(getInternalState(this).subscription));\n  }\n});\n\nvar $Observable = function Observable(subscriber) {\n  anInstance(this, ObservablePrototype);\n  setInternalState(this, { subscriber: aCallable(subscriber) });\n};\n\nvar ObservablePrototype = $Observable.prototype;\n\nredefineAll(ObservablePrototype, {\n  subscribe: function subscribe(observer) {\n    var length = arguments.length;\n    return new Subscription(isCallable(observer) ? {\n      next: observer,\n      error: length > 1 ? arguments[1] : undefined,\n      complete: length > 2 ? arguments[2] : undefined\n    } : isObject(observer) ? observer : {}, getInternalState(this).subscriber);\n  }\n});\n\nredefineAll($Observable, {\n  from: function from(x) {\n    var C = isConstructor(this) ? this : $Observable;\n    var observableMethod = getMethod(anObject(x), OBSERVABLE);\n    if (observableMethod) {\n      var observable = anObject(call(observableMethod, x));\n      return observable.constructor === C ? observable : new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n    var iterator = getIterator(x);\n    return new C(function (observer) {\n      iterate(iterator, function (it, stop) {\n        observer.next(it);\n        if (observer.closed) return stop();\n      }, { IS_ITERATOR: true, INTERRUPTED: true });\n      observer.complete();\n    });\n  },\n  of: function of() {\n    var C = isConstructor(this) ? this : $Observable;\n    var length = arguments.length;\n    var items = Array(length);\n    var index = 0;\n    while (index < length) items[index] = arguments[index++];\n    return new C(function (observer) {\n      for (var i = 0; i < length; i++) {\n        observer.next(items[i]);\n        if (observer.closed) return;\n      } observer.complete();\n    });\n  }\n});\n\nredefine(ObservablePrototype, OBSERVABLE, function () { return this; });\n\n$({ global: true }, {\n  Observable: $Observable\n});\n\nsetSpecies('Observable');\n"]},"metadata":{},"sourceType":"script"}
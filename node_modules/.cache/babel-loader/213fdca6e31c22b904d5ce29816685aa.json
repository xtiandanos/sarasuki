{"ast":null,"code":"'use strict';\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar $ = require('../internals/export');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar anObject = require('../internals/an-object');\n\nvar toString = require('../internals/to-string');\n\nvar getSetIterator = require('../internals/get-set-iterator');\n\nvar iterate = require('../internals/iterate');\n\nvar arrayJoin = uncurryThis([].join);\nvar push = [].push; // `Set.prototype.join` method\n// https://github.com/tc39/proposal-collection-methods\n\n$({\n  target: 'Set',\n  proto: true,\n  real: true,\n  forced: IS_PURE\n}, {\n  join: function join(separator) {\n    var set = anObject(this);\n    var iterator = getSetIterator(set);\n    var sep = separator === undefined ? ',' : toString(separator);\n    var result = [];\n    iterate(iterator, push, {\n      that: result,\n      IS_ITERATOR: true\n    });\n    return arrayJoin(result, sep);\n  }\n});","map":{"version":3,"sources":["/Users/christiandanos/Desktop/sarasuki/base/node_modules/core-js/modules/esnext.set.join.js"],"names":["IS_PURE","require","$","uncurryThis","anObject","toString","getSetIterator","iterate","arrayJoin","join","push","target","proto","real","forced","separator","set","iterator","sep","undefined","result","that","IS_ITERATOR"],"mappings":"AAAA;;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,oCAAD,CAAzB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIK,cAAc,GAAGL,OAAO,CAAC,+BAAD,CAA5B;;AACA,IAAIM,OAAO,GAAGN,OAAO,CAAC,sBAAD,CAArB;;AAEA,IAAIO,SAAS,GAAGL,WAAW,CAAC,GAAGM,IAAJ,CAA3B;AACA,IAAIC,IAAI,GAAG,GAAGA,IAAd,C,CAEA;AACA;;AACAR,CAAC,CAAC;AAAES,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,KAAK,EAAE,IAAxB;AAA8BC,EAAAA,IAAI,EAAE,IAApC;AAA0CC,EAAAA,MAAM,EAAEd;AAAlD,CAAD,EAA8D;AAC7DS,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcM,SAAd,EAAyB;AAC7B,QAAIC,GAAG,GAAGZ,QAAQ,CAAC,IAAD,CAAlB;AACA,QAAIa,QAAQ,GAAGX,cAAc,CAACU,GAAD,CAA7B;AACA,QAAIE,GAAG,GAAGH,SAAS,KAAKI,SAAd,GAA0B,GAA1B,GAAgCd,QAAQ,CAACU,SAAD,CAAlD;AACA,QAAIK,MAAM,GAAG,EAAb;AACAb,IAAAA,OAAO,CAACU,QAAD,EAAWP,IAAX,EAAiB;AAAEW,MAAAA,IAAI,EAAED,MAAR;AAAgBE,MAAAA,WAAW,EAAE;AAA7B,KAAjB,CAAP;AACA,WAAOd,SAAS,CAACY,MAAD,EAASF,GAAT,CAAhB;AACD;AAR4D,CAA9D,CAAD","sourcesContent":["'use strict';\nvar IS_PURE = require('../internals/is-pure');\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar anObject = require('../internals/an-object');\nvar toString = require('../internals/to-string');\nvar getSetIterator = require('../internals/get-set-iterator');\nvar iterate = require('../internals/iterate');\n\nvar arrayJoin = uncurryThis([].join);\nvar push = [].push;\n\n// `Set.prototype.join` method\n// https://github.com/tc39/proposal-collection-methods\n$({ target: 'Set', proto: true, real: true, forced: IS_PURE }, {\n  join: function join(separator) {\n    var set = anObject(this);\n    var iterator = getSetIterator(set);\n    var sep = separator === undefined ? ',' : toString(separator);\n    var result = [];\n    iterate(iterator, push, { that: result, IS_ITERATOR: true });\n    return arrayJoin(result, sep);\n  }\n});\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar $ = require('../internals/export');\n\nvar getBuiltIn = require('../internals/get-built-in');\n\nvar bind = require('../internals/function-bind-context');\n\nvar call = require('../internals/function-call');\n\nvar aCallable = require('../internals/a-callable');\n\nvar anObject = require('../internals/an-object');\n\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar getSetIterator = require('../internals/get-set-iterator');\n\nvar iterate = require('../internals/iterate'); // `Set.prototype.map` method\n// https://github.com/tc39/proposal-collection-methods\n\n\n$({\n  target: 'Set',\n  proto: true,\n  real: true,\n  forced: IS_PURE\n}, {\n  map: function map(callbackfn\n  /* , thisArg */\n  ) {\n    var set = anObject(this);\n    var iterator = getSetIterator(set);\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    var newSet = new (speciesConstructor(set, getBuiltIn('Set')))();\n    var adder = aCallable(newSet.add);\n    iterate(iterator, function (value) {\n      call(adder, newSet, boundFunction(value, value, set));\n    }, {\n      IS_ITERATOR: true\n    });\n    return newSet;\n  }\n});","map":{"version":3,"sources":["/Users/christiandanos/Desktop/sarasuki/base/node_modules/core-js/modules/esnext.set.map.js"],"names":["IS_PURE","require","$","getBuiltIn","bind","call","aCallable","anObject","speciesConstructor","getSetIterator","iterate","target","proto","real","forced","map","callbackfn","set","iterator","boundFunction","arguments","length","undefined","newSet","adder","add","value","IS_ITERATOR"],"mappings":"AAAA;;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,2BAAD,CAAxB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,oCAAD,CAAlB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,4BAAD,CAAlB;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIM,QAAQ,GAAGN,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIO,kBAAkB,GAAGP,OAAO,CAAC,kCAAD,CAAhC;;AACA,IAAIQ,cAAc,GAAGR,OAAO,CAAC,+BAAD,CAA5B;;AACA,IAAIS,OAAO,GAAGT,OAAO,CAAC,sBAAD,CAArB,C,CAEA;AACA;;;AACAC,CAAC,CAAC;AAAES,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,KAAK,EAAE,IAAxB;AAA8BC,EAAAA,IAAI,EAAE,IAApC;AAA0CC,EAAAA,MAAM,EAAEd;AAAlD,CAAD,EAA8D;AAC7De,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaC;AAAW;AAAxB,IAAyC;AAC5C,QAAIC,GAAG,GAAGV,QAAQ,CAAC,IAAD,CAAlB;AACA,QAAIW,QAAQ,GAAGT,cAAc,CAACQ,GAAD,CAA7B;AACA,QAAIE,aAAa,GAAGf,IAAI,CAACY,UAAD,EAAaI,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAnD,CAAxB;AACA,QAAIC,MAAM,GAAG,KAAKf,kBAAkB,CAACS,GAAD,EAAMd,UAAU,CAAC,KAAD,CAAhB,CAAvB,GAAb;AACA,QAAIqB,KAAK,GAAGlB,SAAS,CAACiB,MAAM,CAACE,GAAR,CAArB;AACAf,IAAAA,OAAO,CAACQ,QAAD,EAAW,UAAUQ,KAAV,EAAiB;AACjCrB,MAAAA,IAAI,CAACmB,KAAD,EAAQD,MAAR,EAAgBJ,aAAa,CAACO,KAAD,EAAQA,KAAR,EAAeT,GAAf,CAA7B,CAAJ;AACD,KAFM,EAEJ;AAAEU,MAAAA,WAAW,EAAE;AAAf,KAFI,CAAP;AAGA,WAAOJ,MAAP;AACD;AAX4D,CAA9D,CAAD","sourcesContent":["'use strict';\nvar IS_PURE = require('../internals/is-pure');\nvar $ = require('../internals/export');\nvar getBuiltIn = require('../internals/get-built-in');\nvar bind = require('../internals/function-bind-context');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar speciesConstructor = require('../internals/species-constructor');\nvar getSetIterator = require('../internals/get-set-iterator');\nvar iterate = require('../internals/iterate');\n\n// `Set.prototype.map` method\n// https://github.com/tc39/proposal-collection-methods\n$({ target: 'Set', proto: true, real: true, forced: IS_PURE }, {\n  map: function map(callbackfn /* , thisArg */) {\n    var set = anObject(this);\n    var iterator = getSetIterator(set);\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    var newSet = new (speciesConstructor(set, getBuiltIn('Set')))();\n    var adder = aCallable(newSet.add);\n    iterate(iterator, function (value) {\n      call(adder, newSet, boundFunction(value, value, set));\n    }, { IS_ITERATOR: true });\n    return newSet;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}